#!/bin/bash

DIR=$(dirname $(readlink -e $0)) 
source $DIR/src/vars

# help stop prompts from apt-get 
export DEBIAN_FRONTEND=noninteractive


checkRoot

# log_daemon_msg "Checking if root"
# if [[ $EUID -ne 0 ]]; then
#     log_failure_msg "This script must be run as root" 
#     exit 1
# else
#     log_daemon_msg 0
# fi

printf "\nPlease enter country code for apt sources.list [us]: "
read CCODE

log_daemon_msg "backing up apt source file"
if sh -c 'cp -f /etc/apt/sources.list /etc/apt/sources.list.bak' >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

wait

log_daemon_msg "Copying new sources.list template file..."
if sh -c 'cp -f $DIR/templates/sources.list.tmpl /etc/apt/sources.list' >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi


log_daemon_msg "Setting up sources file (country) "
if sed -i "s#<COUNTRY_CODE>#$CCODE#" /etc/apt/sources.list >> $LOG 2>&1 &;
    then
        log_end_msg 0
    else
        log_failure_msg "Up-to-date Apt sources is required"
        exit 1
fi

log_daemon_msg "Setting distro in source file"
if sed -i "s#<DISTRO>#$REL#" /etc/apt/sources.list >> $LOG 2>&1 &;
    then
        log_end_msg 0
    else
        log_failure_msg "Up-to-date Apt sources is required"
        exit 1
fi


log_daemon_msg "Adding apt key"
if apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 437D05B5 3E5C1192 >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

log_daemon_msg "Adding key for tor"
if sh -c 'gpg --keyserver keys.gnupg.net --recv 886DDD89' >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

log_daemon_msg "more tor keys"
if sh -c 'gpg --export A3C4F0F979CAA22CDBA8F512EE8CBC9E886DDD89 | apt-key add -' >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi


## setup default apt config stuff
log_daemon_msg "Setting potsfix default hostname: $HOSTNAME"
if sh -c 'debconf-set-selections <<< "postfix postfix/mailname string $HOSTNAME"' >> $LOG 2>&1 &; 
    then log_end_msg 0 else log_end_msg 1
fi

log_daemon_msg "Setting postfix to type: Internet Site"
if 'debconf-set-selections <<< "postfix postfix/main_mailer_type string '\''Internet Site'\''"' >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi


# log_daemon_msg "Installing packages from Ubuntu Repositories... "

log_daemon_msg "Updating package list"
if apt-get -qq -y --force-yes update >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

log_daemon_msg "Installing packages"
if apt-get -qq -y --force-yes install $PKG >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

log_daemon_msg "Installing python pip packages"
if pip -q install $PIP >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

# Clones git URL's
for GITURL in "${!GIT[@]}";
do
    # if folder does not exist, will checkout
    if [[ ! -d ${GIT["$GITURL"]} ]]; then
        log_daemon_msg "Cloning $GITURL into ${GIT["$GITURL"]}"
        if git clone -q $GITURL "${GIT["$GITURL"]}" >> $LOG 2>&1 &;
            then log_end_msg 0 else log_end_msg 1
        fi
    fi
done

# checks out SVNs
for SVNURL in "${!SVN[@]}";
do
    # if folder does not exist, will checkout
    if [[ ! -d ${SVN["$SVNURL"]} ]]; then
        log_daemon_msg "Checking out $SVNURL into ${SVN["$SVNURL"]}"
        if svn --quiet checkout $SVNURL "${SVN["$SVNURL"]}" >> $LOG 2>&1 &;
            then log_end_msg 0 else log_end_msg 1
        fi
    fi  
done


wait
# refresh shell right quick
# $SHELL

printf "\nPlease enter your username to create new user - leave blank to skip: "
read UNAME

if [ ! -z "$UNAME" ]; then
    log_daemon_msg "Creating new user $UNAME ..."
    if adduser --gecos $UNAME >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    if [[ ! -d /home/$UNAME ]]; then
        log_daemon_msg "Creating home folder for $UNAME"
        if mkdir -p /home/$UNAME >> $LOG 2>&1 &;
            then log_end_msg 0 else log_end_msg 1
        fi
    fi

    log_daemon_msg "Add $UNAME to sudoers"
    if sh -c 'echo "${UNAME} ALL=(ALL:ALL) ALL" | (EDITOR="tee -a" visudo)' >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi
fi

log_daemon_msg "Setting up ruby-build"
if sh /usr/local/share/ruby-build/install.sh >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi

log_daemon_msg "Downloading ufonet zombies"
if python /usr/local/share/ufonet/ufonet/ufonet --force-yes --download-zombies >> $LOG 2>&1 &;
    then log_end_msg 0 else log_end_msg 1
fi


printf "\nEnter port number for SSH server [22]: "
read SSHPort

exec $DIR/src/ssh $SSHPort &

printf "\nWould you like to install Metasploit? [Y/n]: "
read MSF

MSF=$(echo $MSF | tr 'a-z' 'A-Z')

if [ "$MSF" = 'Y' ] || [ "$MSF" = 'YES' ] || [ -z $MSF ]; then
    cd $MSFPATH;

    log_daemon_msg "Installing ruby v$MSFRVERSION for Metasploit"
    if rbenv install $MSFRVERSION >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Setting version $MSFRVERSION as local version for metasploit through rbenv"
    if rbenv local $MSFRVERSION >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Installing bundler"
    if gem install bundler >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Installing Metasploit gems"
    if bundle install >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Setting up local bins for MSF"
    if bash -c 'for MSF in $(ls msf*); do ln -s /usr/local/share/metasploit-framework/$MSF /usr/local/bin/$MSF;done' >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi
fi

exec $DIR/src/nmap &
exec $DIR/src/ufw $SSHPort &
exec $DIR/src/bin &
cd $PWD


if [[ -z $UNAME ]]; then

    export HOME=/home/$UNAME

    cd /home/$UNAME

    for GITURL in "${!USERGIT[@]}";
    do
        # if folder does not exist, will checkout
        if [[ ! -d ${USERGIT["$GITURL"]} ]]; then
            log_daemon_msg "Cloning $GITURL into ${USERGIT["$GITURL"]}"
            if git clone -q $GITURL "${USERGIT["$GITURL"]}" >> $LOG 2>&1 &;
                then log_end_msg 0 else log_end_msg 1
            fi
        fi
    done

    exec $DIR/src/pyenv &

    if su dtrip -c 'setopt EXTENDED_GLOB'
    for rcfile in "${ZDOTDIR:-$HOME}"/.zprezto/runcoms/^README.md(.N); do
          ln -s "$rcfile" "${ZDOTDIR:-$HOME}/.${rcfile:t}"
    done

    cd $PWD

    log_daemon_msg "Setting home folder owner for $UNAME"
    if chown $UNAME:$UNAME -R /home/$UNAME >> $LOG 2>&1 &; 
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Setting $UNAME home folder permissions"
    if chmod g+s /home/$UNAME >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Setting up tmux env"
    if sh ${HOME}/tmux/install >> $LOG 2>&1 &;
        then log_end_msg 0 else log_end_msg 1
    fi

    log_daemon_msg "Running vim setup"
    if sh ${HOME}/.vim/install >> $LOG 2>&1 &; 
        then log_end_msg 0 else log_end_msg 1
    fi

fi

echo "\nSuccess! Setup complete\nDont forget to set $UNAME's new password"
echo "Example (as root):\n\tpasswd dtrip"
exit 0
